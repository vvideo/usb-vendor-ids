import fs from 'fs';

const autoGeneratedMessage = '/* Auto-generated code, do not change it manually */\n\n';

function parseFile(txt) {
    const rows = txt.trim().split('\n');

    return rows.map((item, i) => {
        const [vendor, id = ''] = item.trim().split(/\s(?=\d+$)/);

        if (!vendor) {
            console.error(`Empty vendor "${item}"`);
            return undefined;
        }

        if (!id) {
            console.error(`Empty id "${item}"`);
            return undefined;
        }

        return [parseInt(id), vendor.trim()];
    }).filter(Boolean);
}

const templateScriptES6 = fs.readFileSync('./tools/templates/script.mjs');
const templateScript = fs.readFileSync('./tools/templates/script.js');
const vendorIds = fs.readFileSync('./tools/data/vendor-ids.txt', 'utf-8');
const obsoleteVendorIds = fs.readFileSync('./tools/data/obsolete-vendor-ids.txt', 'utf-8');

fs.writeFileSync('./dist/index.mjs', `${autoGeneratedMessage}export const usbVendorIds = ${JSON.stringify(parseFile(vendorIds), null, 2)};\n\nconst usbObsoleteVendorIds = ${JSON.stringify(parseFile(obsoleteVendorIds), null, 2)};\n\n${templateScriptES6}`);
fs.writeFileSync('./dist/index.js', `${autoGeneratedMessage}const usbVendorIds = ${JSON.stringify(parseFile(vendorIds), null, 2)};\n\nconst usbObsoleteVendorIds = ${JSON.stringify(parseFile(obsoleteVendorIds), null, 2)};\n\n${templateScript}`);

fs.writeFileSync('./dist/usb-vendor-ids.json', JSON.stringify(parseFile(vendorIds), null, 2));
fs.writeFileSync('./dist/usb-obsolete-vendor-ids.json', JSON.stringify(parseFile(obsoleteVendorIds), null, 2));
